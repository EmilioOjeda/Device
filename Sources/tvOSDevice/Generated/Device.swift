import Foundation

/*
 * Do not edit this file.
 * Generated from Xcode's Command-Line Tools databases - Xcode 14.2 (14C18).
 **/

/// The representation of the device running - it could be either physical or simulated.
/// > Generated from Xcode's Command-Line Tools databases - Xcode 14.2 (14C18).
public struct Device: Identifiable, Hashable, CaseIterable {
    /// The identifier for the device.
    public let id: String
    /// The known/commercial name of the device.
    public let model: String

    /// Creates a representation of a device.
    /// - Parameters:
    ///   - id: The identifier for the device.
    ///   - model: The known/commercial name of the device.
    init(id: String, model: String) {
        self.id = id
        self.model = model
    }

    /// Creates a representation of the device found in Xcode's databases based on the given device identifier.
    /// - Parameter id: The identifier for the device.
    init(id: String) {
        if let device = Device.allCases.first(where: { $0.id == id }) {
            self = device
        } else if let simulator = Device.simulators.first(where: { $0.id == id }) {
            self = simulator
        } else {
            self = .unknown
        }
    }

    /// Simulator instances.
    static let simulators: [Device] = {
        ["i386", "x86_64", "arm64"]
            .map { deviceId in
                Device(id: deviceId, model: "Simulator")
            }
    }()

    /// The device identifier read from the system info.
    static let deviceIdentifier: String = {
        var systemInfo = utsname()
        uname(&systemInfo)
        return String(
            cString: [UInt8](
                Data(
                    bytes: &systemInfo.machine,
                    count: Int(_SYS_NAMELEN)
                )
            )
        )
    }()

    /// It is `true` when the device does not match either simulators or physical devices.
    public var isUnknown: Bool {
        self == .unknown
    }

    /// It is `true` when running on a simulator instance.
    public var isSimulator: Bool {
        Device.simulators.contains(self)
    }

    /// It is `true` when running on a physical device.
    public var isDevice: Bool {
        !isSimulator && !isUnknown
    }

    /// The current instance of the device that is running.
    public static let current = Device(id: deviceIdentifier)
    /// An unknown device instance.
    public static let unknown = Device(id: "unknown", model: "unknown")
    // # tvOS
    /// Apple TV 4K (2nd generation)
    public static let appleTV11_1 = Device(id: "AppleTV11,1", model: "Apple TV 4K (2nd generation)")
    /// Apple TV 4K (3rd generation)
    public static let appleTV14_1 = Device(id: "AppleTV14,1", model: "Apple TV 4K (3rd generation)")
    /// Apple TV
    public static let appleTV5_3 = Device(id: "AppleTV5,3", model: "Apple TV")
    /// Apple TV 4K
    public static let appleTV6_2 = Device(id: "AppleTV6,2", model: "Apple TV 4K")
    /// AppleTV
    public static let appleTV3_1 = Device(id: "AppleTV3,1", model: "AppleTV")
    /// AppleTV
    public static let appleTV3_2 = Device(id: "AppleTV3,2", model: "AppleTV")

    public static let allCases: [Device] = [
        // # tvOS
        .appleTV11_1,
        .appleTV14_1,
        .appleTV5_3,
        .appleTV6_2,
        .appleTV3_1,
        .appleTV3_2
    ]
}